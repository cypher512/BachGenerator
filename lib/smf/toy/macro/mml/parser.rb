#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "parser.ry".
#

require 'racc/parser'



require 'smf'
require 'smf/toy/macro'
require 'rational'

class SemanticError < StandardError; end


module SMF

  class MMLParser < Racc::Parser

module_eval <<'..end parser.ry modeval..id74aaf71953', 'parser.ry', 66

  STEPTAB = { 'w'=>1.to_r/1, 'h'=>1.to_r/2,
	      'q'=>1.to_r/4, 'i'=>1.to_r/8,
	      's'=>1.to_r/16,'z'=>1.to_r/32,
	      'u'=>1.to_r/1920 }

  NOTETAB = { 'a'=>9, 'b'=>11, 'c'=>0, 'd'=>2, 'e'=>4, 'f'=>5, 'g'=>7 }

  def lineno() @co end

  def parse(str)
    @co = 1
    @str = str
    do_parse
  end

  def next_token
    loop do
      @str = @str.sub(/\A([\s\v]+)/, '')
      if $1
	@co += $1.count("\n")
      end
      @str = @str.sub(%r|\A(//.*)$|, '')
      break unless $1
    end
    return [false, false] if @str.size == 0

    if /\A([whqiszu])\b(\.+)?/i =~ @str
      @str = $'
      n = STEPTAB[$1.downcase]
      i = if $2 then $2.size else 0 end
      p = 1
      i.times do |j|
	p += Rational(1, 2 ** (j + 1))
      end
      s = n * p
      return [:STEP, s]
    end

    if /\Ar\b/i =~ @str
      @str = $'
      return [:NOTE, nil]
    end

    if /\A([abcdefg])\b([$%#]+)?([,']+)?/i =~ @str
      @str = $'
      na = NOTETAB[$1.downcase]
      if $2
	s1 = 0
	s1 -= $2.count('$')
	s1 += $2.count('#')
      end
      if $3
	s12 = 0
	s12 -= $3.count(",") * 12
	s12 += $3.count("'") * 12
      end
      return [:NOTE, [na, s1, s12]]
    end

    if /\A"/ =~ @str
      @str = $'
      s = '"'
      until /\A"/ =~ @str
	case @str
	when /\A(\\.|.)/m; s << $1
	end
	@co += $1.count("\n")
	@str = $'
      end
      s << '"'
      @str = $'
      return [:TEXT, eval(s)]
    end

    if /\A([a-z][a-z0-9]*)/i =~ @str
      @str = $'
      return [:VAR, $1]
    end

    if %r|\A([-+*/]?=)| =~ @str
      @str = $'
      return [:AOP, $1[0]]
    end

    if /\A(\d+)/ =~ @str
      @str = $'
      return [:NUM, Rational($1.to_i)]
    end

    if /\A(.)/ =~ @str
      @str = $'
      return [$1, $1]
    end
  end

..end parser.ry modeval..id74aaf71953

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 20, :_reduce_1,
 0, 21, :_reduce_2,
 2, 21, :_reduce_3,
 1, 22, :_reduce_4,
 2, 22, :_reduce_5,
 1, 23, :_reduce_6,
 1, 23, :_reduce_none,
 1, 23, :_reduce_none,
 1, 23, :_reduce_none,
 3, 23, :_reduce_10,
 1, 25, :_reduce_11,
 1, 26, :_reduce_12,
 3, 27, :_reduce_13,
 5, 27, :_reduce_14,
 3, 24, :_reduce_15,
 3, 24, :_reduce_16,
 3, 24, :_reduce_17,
 3, 24, :_reduce_18,
 3, 24, :_reduce_19,
 1, 24, :_reduce_20,
 3, 28, :_reduce_21,
 3, 28, :_reduce_22,
 3, 28, :_reduce_23,
 3, 28, :_reduce_24,
 2, 28, :_reduce_25,
 3, 28, :_reduce_26,
 1, 28, :_reduce_27 ]

racc_reduce_n = 28

racc_shift_n = 48

racc_action_table = [
    19,    20,    21,    22,    37,    39,    40,    41,    18,    26,
    26,    26,    10,    33,    13,    26,    26,    42,    25,    25,
    25,    28,    28,    28,    25,    25,    26,    28,    28,    17,
    26,    26,    26,    37,    39,    25,    26,    16,    28,    25,
    25,    25,    28,    28,    28,    25,    19,    20,    28,    37,
    39,    40,    41,     3,    14,    34,    15,     4,     6,   nil,
    38,    10,    14,    13,    15,     4,     6,   nil,    10,    10,
    13,    13,    37,    39,    40,    41,    19,    20,    21,    22,
    10,   nil,    13,    19,    20,    37,    39 ]

racc_action_check = [
    23,    23,    23,    23,    35,    35,    35,    35,     7,    26,
    38,    41,    10,    23,    10,    37,    40,    35,    26,    38,
    41,    26,    38,    41,    37,    40,    17,    37,    40,     6,
    19,    20,    25,    46,    46,    17,    39,     3,    17,    19,
    20,    25,    19,    20,    25,    39,    32,    32,    39,    27,
    27,    27,    27,     1,    24,    24,    24,    24,    24,   nil,
    27,    24,     2,    24,     2,     2,     2,   nil,    21,     2,
    21,     2,    44,    44,    44,    44,     8,     8,     8,     8,
    22,   nil,    22,    31,    31,    47,    47 ]

racc_action_pointer = [
   nil,    53,    54,    37,   nil,   nil,    16,     1,    73,   nil,
    -3,   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,    24,
    25,    53,    65,    -3,    46,    26,     3,    46,   nil,   nil,
   nil,    80,    43,   nil,   nil,     1,   nil,     9,     4,    30,
    10,     5,   nil,   nil,    69,   nil,    30,    82 ]

racc_action_default = [
    -2,   -28,    -1,   -28,   -12,    -3,   -28,    -4,    -6,    -7,
   -28,    -8,    -9,   -20,    -2,   -11,    48,   -28,    -5,   -28,
   -28,   -28,   -28,   -28,   -28,   -28,   -28,   -13,   -27,   -17,
   -18,   -15,   -16,   -19,   -10,   -28,   -25,   -28,   -28,   -28,
   -28,   -28,   -26,   -23,   -14,   -24,   -21,   -22 ]

racc_goto_table = [
    27,     2,    29,    30,     1,    23,   nil,   nil,    35,    36,
   nil,   nil,   nil,   nil,   nil,    24,    31,    32,   nil,   nil,
    43,    44,    45,    46,    47 ]

racc_goto_check = [
     9,     2,     9,     9,     1,     5,   nil,   nil,     9,     9,
   nil,   nil,   nil,   nil,   nil,     2,     5,     5,   nil,   nil,
     9,     9,     9,     9,     9 ]

racc_goto_pointer = [
   nil,     4,     1,   nil,   nil,    -5,   nil,   nil,   nil,   -17 ]

racc_goto_default = [
   nil,   nil,   nil,     5,     7,     8,     9,    11,    12,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :UMINUS => 2,
 "*" => 3,
 "/" => 4,
 "+" => 5,
 "-" => 6,
 "&" => 7,
 "{" => 8,
 "}" => 9,
 :NOTE => 10,
 :TEXT => 11,
 :VAR => 12,
 :AOP => 13,
 "," => 14,
 "(" => 15,
 ")" => 16,
 :STEP => 17,
 :NUM => 18 }

racc_use_result_var = true

racc_nt_base = 19

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'UMINUS',
'"*"',
'"/"',
'"+"',
'"-"',
'"&"',
'"{"',
'"}"',
'NOTE',
'TEXT',
'VAR',
'AOP',
'","',
'"("',
'")"',
'STEP',
'NUM',
'$start',
'prog',
'list',
'stmt',
'expr',
'step',
'note',
'text',
'asgn',
'num']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'parser.ry', 13
  def _reduce_1( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 15
  def _reduce_2( val, _values, result )
 result = [:list, []]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 16
  def _reduce_3( val, _values, result )
 val[0][1] << val[1]; result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 19
  def _reduce_4( val, _values, result )
 result = [:stmt, val[0]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 20
  def _reduce_5( val, _values, result )
 result = [:stmt, val[0], val[1]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 23
  def _reduce_6( val, _values, result )
 result = [:step, val[0]]
   result
  end
.,.,

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

module_eval <<'.,.,', 'parser.ry', 25
  def _reduce_10( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 28
  def _reduce_11( val, _values, result )
 result = [:note, val[0]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 29
  def _reduce_12( val, _values, result )
 result = [:text, val[0]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 32
  def _reduce_13( val, _values, result )
 result = [:asgn, val[0], val[1], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 34
  def _reduce_14( val, _values, result )
 result = [:asgn, val[0], val[1], val[2], val[4]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 37
  def _reduce_15( val, _values, result )
 result = [:add, val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 38
  def _reduce_16( val, _values, result )
 result = [:sub, val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 39
  def _reduce_17( val, _values, result )
 result = [:mul, val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 40
  def _reduce_18( val, _values, result )
 result = [:div, val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 41
  def _reduce_19( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 42
  def _reduce_20( val, _values, result )
 result = [:imm, val[0]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 45
  def _reduce_21( val, _values, result )
 result = [:add, val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 46
  def _reduce_22( val, _values, result )
 result = [:sub, val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 47
  def _reduce_23( val, _values, result )
 result = [:mul, val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 48
  def _reduce_24( val, _values, result )
 result = [:div, val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 49
  def _reduce_25( val, _values, result )
 result = [:negate, val[1]]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 50
  def _reduce_26( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'parser.ry', 51
  def _reduce_27( val, _values, result )
 result = [:imm, val[0]]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

  end   # class MMLParser

end   # module SMF


module SMF

  class MMLEvaluator

    def initialize(de) @de = de end

    def evaluate(st)
      case st[0]
      when :list
	@de.push
	st[1].each do |st2|
	  evaluate(st2)
	end
	of = @de[:of]
	@de.pop
	@de[:of] = of
	@de.snap
      when :stmt
	of = @de[:of]
	evaluate(st[1])
	if st[2]
	  @de[:of] = of
	end
      when :step
	@de[:le] = evaluate(st[1])
      when :add
	return evaluate(st[1]) + evaluate(st[2])
      when :sub
	return evaluate(st[1]) - evaluate(st[2])
      when :mul
	return evaluate(st[1]) * evaluate(st[2])
      when :div
	return evaluate(st[1]) / evaluate(st[2])
      when :negate
	return - evaluate(st[1])
      when :imm
	return st[1]
      when :note
	@de[:_no] = st[1]
	@de.snap
	@de[:_no] = nil
	@de[:of] += @de[:le]
      when :text
	@de[:_tx] = st[1]
	@de.snap
	@de[:_tx] = nil
      when :asgn
	va = st[1]
	op = st[2]
	ob = evaluate(st[3])
	if st[4]
	  ob2 = evaluate(st[4])
	  ob = [ob, ob2]
	end
	va = va.intern
	v = @de[va]
	case op
	when ?+; v += ob
	when ?-; v -= ob
	when ?*; v *= ob
	when ?/; v /= ob
	when ?=; v  = ob
	end
	if va == :ke
	  @de[:_ke] = v
	  @de.snap
	  @de[:_ke] = nil
	end
	@de[va] = v
	@de.snap
      end
    end

  end

end
